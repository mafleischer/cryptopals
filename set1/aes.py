#!/usr/bin/python3

import allcrypto
import numpy as np
import collections

# multiplicative inverse, galois field; used to obscure the relationship between key and cipher
# composed of balanced highly nonlinear Boolean Functions
sbox = [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]

mds_matrix_flat = [2, 3, 1, 1, 1, 2, 3, 1, 1, 1, 2, 3, 3, 1, 1, 2]

# mds 1 and 2 used in Mix Columns
mds_lookup_2 = [0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5]

mds_lookup_3 = [0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a]

# used in key expansion
rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]

########## some helper functions ############


def check_chunk(bstr):
	# check state len
	if len(bstr) != 16:
		print("Invalid Chunk length!")
		exit(1)


def rotateList(l, num, direction):
	'''
	rotate list by num steps. direction ist r for right and l for left
	'''
	if direction not in ('l', 'r'):
		print("rotateList: direction must be 'l' or 'r'")
		exit(1)
	# cast to list: to make numpy one dim. arrays lists.
	# Because e.g. numpy array of len 0 (shape (0,)) can't be concatenated
	# to longer length arrays
	if direction == 'l':
		return(list(l[num:]) + list(l[0:num]))
	else:
		return(list(l[-num:]) + list(l[0:-num]))


def stateGenerator(bstr_msg):
	"""
	takes the whole length of the message as a byte
	string and returns blocks of it as byte string
	TODO: make block length variable
	"""
	if len(bstr_msg) % 16 != 0:
		print("stateGenerator: msg len % 16 != 0")
		exit(1)
	restmsg = bstr_msg
	while len(restmsg) > 0:
		state = restmsg[:16]
		restmsg = restmsg[16:]
		yield state


def makeNDArrayFrom(bstr, a, b):
	"""
	takes a byte string and returns it as a numpy ndarray, a as rows, b as columns. 4x4 for the moment
	TODO: make length variable
	"""
	array = np.frombuffer(bstr, dtype=np.uint8)
	array.flags.writeable = True
	return(array.reshape(a,b))


def xorBytestrings(bstr1, bstr2):
	if(len(bstr1) != len(bstr2)):
		print("xorBytestrings: strings not of equal len")
		exit(1)
	return(bytes([a ^ b for (a, b) in zip(bstr1, bstr2)]))


def mdsLookup(byte, num):
	"""
	Used in aesMixColumns;
	lookup byte in table mds_lookup_[num];
	byte not changed for 1
	"""
	if num not in (1, 2, 3):
		print("mds_lookup: invalid num {0}".format(num))
		exit(1)
	if num == 1:
		return byte
	if num == 2:
		return mds_lookup_2[byte]
	else:
		return mds_lookup_3[byte]


def padPKCS7(bstr_msg):
	print(bstr_msg)
	# PKCS5 / PKCS7 padding
	padding_byte = (16 - len(bstr_msg) % 16)
	if padding_byte != 16:
		bstr_msg += bytes([padding_byte]) * padding_byte
	else:
		bstr_msg += bytes([16]) * 16
	return(bstr_msg)


def stripPadding(bstr_cypher):
	pass

################# AES functions #####################3


def aesEncrypt(bstr_msg, bstr_key, num_bits):
	if len(bstr_key) != 16:
		# no key derivation yet
		print("Unsuitable key length!")
		exit(1)

	# without padding for now
	# bstr_msg = pad_PKCS7(bstr_msg)

	state_iter = stateGenerator(bstr_msg)
	rounds = {128: 10, 192: 12, 256: 14}
	round_keys = aesKeyExpansion(bstr_key)
	cipher = b''
	for state in state_iter:
		# initial (not actual) round
		state_trans = bytes(makeNDArrayFrom(state, 4, 4).transpose().flatten())
		key_trans = bytes(makeNDArrayFrom(bstr_key, 4, 4).transpose().flatten())
		bstr_state = aesAddRoundkey(state_trans, key_trans)
		for r in range(0, rounds[num_bits]):
			if r == rounds[num_bits] - 1:
				# last round no Mix Columns
				bstr_state = aesSubBytes(bstr_state)
				bstr_state = aesShiftRows(bstr_state)
				key_trans = bytes(makeNDArrayFrom(round_keys[r], 4, 4).transpose().flatten())
				bstr_state = aesAddRoundkey(bstr_state, key_trans)
			else:
				bstr_state = aesSubBytes(bstr_state)
				#print(bstr_state)
				bstr_state = aesShiftRows(bstr_state)
				bstr_state = aesMixColumns(bstr_state)
				key_trans = bytes(makeNDArrayFrom(round_keys[r], 4, 4).transpose().flatten())
				bstr_state = aesAddRoundkey(bstr_state, key_trans)
		state_result = bytes(makeNDArrayFrom(bstr_state, 4, 4).transpose().flatten())
		cipher += state_result
	return cipher
		

def aesKeyExpansionCore(bstr_word, rcon_round):
	"""
	used in aesKeyExpansion
	"""
	word = bytes(rotateList(list(bstr_word), 1, 'l'))
	word = aesSubBytes(word)
	word = bytes([word[0] ^ rcon[rcon_round]]) + word[1:]
	return word


def aesKeyExpansion(bstr_key):
	"""
	Returns the roundkeys a list of byte strings
	TODO: make length parameters variable
	"""
	if len(bstr_key) != 16 and len(bstr_key) != 24 and len(bstr_key) != 32:
		print("Invalid key length!")
		exit(1)
	numbits = len(bstr_key) * 8
	rounds = {128:10, 192:12, 256: 14}
	round_keys = []

	# transposed since we are operating on the columns
	#prevkey = makeNDArrayFrom(bstr_key, 4, 4).transpose()
	prevkey = makeNDArrayFrom(bstr_key, 4, 4)

	newkey = b''
	offset = 0
	rcon_round = 1
	while len(round_keys) < rounds[numbits]:
		# on every first 4 byte group of the 16 byte blocks perform rotate, subbytes
		if offset == 0:
			word = bytes(prevkey[3])
			word = aesKeyExpansionCore(word, rcon_round)
			rcon_round += 1
		else:
			word = newkey[offset-4:offset]
		word_from_prevkey = bytes(prevkey.flatten())[offset:offset+4]
		word = xorBytestrings(word, word_from_prevkey)
		newkey += word
		offset += 4
		if offset == 16:
			offset = 0
			prevkey = makeNDArrayFrom(newkey, 4, 4)
			# transpose back and convert to byte string before appending to result list
			#newkey = bytes(makeNDArrayFrom(newkey, 4, 4).transpose().flatten())
			newkey = bytes(makeNDArrayFrom(newkey, 4, 4).flatten())
			round_keys.append(newkey)
			newkey = b''
	return(round_keys)


def aesAddRoundkey(ndarray_state, ndarray_key):
	#return(np.bitwise_xor(ndarray_state, ndarray_key))
	return(xorBytestrings(ndarray_state, ndarray_key))


def aesSubBytes(bstr_state):
	return(bytes([sbox[b] for b in bstr_state]))


def aesRCon(bstr_state):
	substitue = b''
	for b in bstr_state:
		substitue += rcon[b]
	return(substitue)


def aesShiftRows(bstr_state):
	arr = makeNDArrayFrom(bstr_state, 4, 4)
	for i in range(len(arr)):
		arr[i] = rotateList(arr[i], i, 'l')
	return(bytes(arr.flatten()))


def aesMixColumns(bstr_state):
	"""
	TODO: make variable
	"""
	# go for columns
	state = makeNDArrayFrom(bstr_state, 4, 4).transpose()
	mds_matrix = np.array(mds_matrix_flat)
	mds_matrix = mds_matrix.reshape(4, 4)
	result = np.zeros(shape=(4, 4), dtype=np.int8)
	# number of columns
	# iterate over columns
	for i in range(len(state)):
		# iterate over bytes
		result_byte = 0
		for bnum in range(len(state[i])):
				result[i][bnum] = mdsLookup(state[i][0], mds_matrix[bnum][0])
				result[i][bnum] ^= mdsLookup(state[i][1], mds_matrix[bnum][1])
				result[i][bnum] ^= mdsLookup(state[i][2], mds_matrix[bnum][2])
				result[i][bnum] ^= mdsLookup(state[i][3], mds_matrix[bnum][3])
	result = bytes(result.transpose().flatten())
	return(result)


def aesDecrypt(bstr_cipher, bstr_key):
	if len(bstr_key) != 16:
		# no key derivation yet
		print("Unsuitable key length!")
		exit(1)

	state_iter = stateGenerator(bstr_cipher)
	rounds = {128: 10, 192: 12, 256: 14}
	round_keys = aesKeyExpansion(bstr_key)
	cipher = b''
	for state in state_iter:
		# initial round
		#ndarray_state = makeNDArrayFrom(bstr_state, 4, 4)
		#ndarray_state = aesAddRoundkey(ndarray_state, makeNDArrayFrom(bstr_key, 4, 4))
		state_trans = bytes(makeNDArrayFrom(state, 4, 4).transpose().flatten())
		key_trans = bytes(makeNDArrayFrom(bstr_key, 4, 4).transpose().flatten())
		bstr_state = aesAddRoundkey(state_trans, key_trans)
		
		#print(bstr_state)

		# rounds
		for r in range(0, rounds[num_bits]):
			if r == 0:
				# first round no inverse MixColumns
				bstr_state = aesSubBytes(bstr_state)
				bstr_state = aesShiftRows(bstr_state)
				key_trans = bytes(makeNDArrayFrom(round_keys[r], 4, 4).transpose().flatten())
				bstr_state = aesAddRoundkey(bstr_state, key_trans)
			else:
				bstr_state = aesSubBytes(bstr_state)
				#print(bstr_state)
				bstr_state = aesShiftRows(bstr_state)
				bstr_state = aesMixColumns(bstr_state)
				key_trans = bytes(makeNDArrayFrom(round_keys[r], 4, 4).transpose().flatten())
				bstr_state = aesAddRoundkey(bstr_state, key_trans)
		state_result = bytes(makeNDArrayFrom(bstr_state,4,4).transpose().flatten())
		cipher += state_result
	return cipher

if __name__ == '__main__':
	np.set_printoptions(formatter={'int':hex})
	cipher = aesEncrypt(bytes("ABCDEFGHIJKLMNOP", "ascii"), b'YELLOW SUBMARINE', 128)
	#aesMixColumns(b'\x2b\x28\xab\x09\x7e\xae\xf7\xcf\x15\xd2\x15\x4f\x16\xa6\x88\x3c')
	# 328831e0435a3137f6309807a88da234
	# 2b28ab097eaef7cf15d2154f16a6883c
	#cipher = aesEncrypt(b'\x32\x88\x31\xe0\x43\x5a\x31\x37\xf6\x30\x98\x07\xa8\x8d\xa2\x34', b'\x2b\x28\xab\x09\x7e\xae\xf7\xcf\x15\xd2\x15\x4f\x16\xa6\x88\x3c', 128)
	
	#k = bytes.fromhex('000102030405060708090a0b0c0d0e0f')
	#d = bytes.fromhex('00112233445566778899aabbccddeeff')
	#cipher = aesEncrypt(d, k, 128)

	# not transposed
	k = bytes.fromhex('2b7e151628aed2a6abf7158809cf4f3c')
	d = bytes.fromhex('3243f6a8885a308d313198a2e0370734')
	cipher = aesEncrypt(d, k, 128)
	
	print(cipher)

	#k = bytes.fromhex('2b7e151628aed2a6abf7158809cf4f3c')
	#print(aesKeyExpansion(k))